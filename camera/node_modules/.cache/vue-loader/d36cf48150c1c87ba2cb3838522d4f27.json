{"remainingRequest":"C:\\ex11\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\ex11\\src\\components\\camera_page.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\ex11\\src\\components\\camera_page.vue","mtime":1638173624294},{"path":"C:\\ex11\\node_modules\\css-loader\\dist\\cjs.js","mtime":1654499747520},{"path":"C:\\ex11\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1654499751814},{"path":"C:\\ex11\\node_modules\\postcss-loader\\src\\index.js","mtime":1654499749285},{"path":"C:\\ex11\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1654499746565},{"path":"C:\\ex11\\node_modules\\vue-loader\\lib\\index.js","mtime":1654499750089}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLyog7Lm066mU6528IOyYgeyDgeydmCDrhIjruYTqsJLsnYQg67iM65287Jqw7KCAIOuEiOu5hOyXkCDrp57stqQgKi8KLnN0eWxlX3ZpZGVvIHsKICB3aWR0aDogMTAwJQp9Cg=="},{"version":3,"sources":["camera_page.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4GA;AACA;AACA;AACA","file":"camera_page.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <v-container>\r\n    <v-row>\r\n      <v-col cols=\"12\" class=\"text-center\">\r\n        <!-- 카메라 영상 부분을 표시 -->\r\n        <video ref=\"rVideo\" class=\"style_video\"></video>\r\n      </v-col>\r\n      <v-col cols=\"12\" class=\"mt-5 text-center\">\r\n        <!-- 만약에 업로드된 이미지가 없으면 안내 문구 표시-->\r\n        <p>현재 iOS는 지원하지 않습니다.</p>\r\n      </v-col>\r\n    </v-row>\r\n    <div class=\"text-center my-3\">\r\n      <!-- 카메라 캡처 버튼을 영상 하단 중앙에 위치 -->\r\n      <v-btn v-if=\"!this.bIsWait\" color=\"red\" fab dark bottom @click=\"fnCameraCapture( )\">\r\n        <v-icon>camera</v-icon>\r\n      </v-btn>\r\n      <v-progress-circular v-if=\"this.bIsWait\" :size=\"50\" indeterminate color=\"grey\"></v-progress-circular>\r\n    </div>\r\n  </v-container>\r\n</template>\r\n\r\n<script>\r\n  // 파이어베이스에서 DB와 스토리지 객체 가져옴\r\n  import {\r\n    oStorage,\r\n    oPicturesinDB\r\n  } from '@/datasources/firebase'\r\n  export default {\r\n    // 파이어베이스와 연결된 뷰파이어 oPictures 객체 준비\r\n    firebase: {\r\n      oPictures: oPicturesinDB\r\n    },\r\n    data() {\r\n      return {\r\n        oPictures: [], // 사진 데이터 저장 변수\r\n        oVideoStream: null, // 카메라 영상 스트림을 저장할 객체변수\r\n        bIsWait: false\r\n      }\r\n    },\r\n    mounted() {\r\n      // Web API를 통해서 사용자 카메라의 접근(영상 only)을 요청함\r\n      navigator.mediaDevices.getUserMedia({\r\n        video: true\r\n      }).then(pVideoStream => {\r\n        // 카메라 영상 스트림 정보를 oVideoStream에 저장함\r\n        this.oVideoStream = pVideoStream\r\n        // 카메라 영상 스트림 정보를 video 엘리먼트에 표시함\r\n        this.$refs.rVideo.srcObject = pVideoStream\r\n        this.$refs.rVideo.play()\r\n      }).catch(function (err) {\r\n        console.log(err)\r\n      })\r\n    },\r\n    destroyed() {\r\n      // 현재 화면을 종료할 경우 현재 재생되는 영상 트랙을 찾아 종료시킴\r\n      const oTrack = this.oVideoStream.getTracks()\r\n      oTrack.map(pTrack => pTrack.stop())\r\n    },\r\n    methods: {\r\n      fnCameraCapture() {\r\n        this.bIsWait = true\r\n        // 현재 재생되는 트랙을 찾아 스틸이미지로 캡처함\r\n        const oVideoTrack = this.oVideoStream.getVideoTracks()[0]\r\n        let oCapturedImage = new window.ImageCapture(oVideoTrack)\r\n        const options = {\r\n          imageHeight: 359,\r\n          imageWidth: 640,\r\n          fillLightMode: 'off'\r\n        };\r\n        const self = this\r\n        // 캡처된 이미지를 파이어베이스 DB와 스토리지에 저장함\r\n        return oCapturedImage.takePhoto(options).then(pImageData => {\r\n          // 영상 정지\r\n          const oTrack = self.oVideoStream.getTracks()\r\n          oTrack.map(pTrack => pTrack.stop())\r\n          console.log('캡처: ' + pImageData.type + ', ' + pImageData.size + '바이트');\r\n          // 저장할 이미지 파일이름으로 사용할 ID 준비\r\n          const nID = new Date().toISOString()\r\n          // 파이어베이스 스토리지에 이미지 파일 저장\r\n          let uploadTask = oStorage.ref('images').child('pic' + nID).put(pImageData)\r\n          uploadTask.on('state_changed', function (snapshot) {\r\n            // state_changed 이벤트를 통해서 얼만큼의 바이트가 업로드 중인지 콘솔에 표시\r\n            let progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n            console.log('업로드: ' + progress + '% 완료', snapshot.state);\r\n          }, function (error) {\r\n            console.log(error)\r\n            // 오류 발생 시 콘솔에 표시\r\n          }, function () {\r\n            // 성공적으로 업로드 완료 후 파이어베이스 DB에 정보 저장\r\n            uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {\r\n              console.log('업로드URL:', downloadURL);\r\n              oPicturesinDB.push({\r\n                  'url': downloadURL,\r\n                  'title': '',\r\n                  'info': '',\r\n                  'filename': 'pic' + nID\r\n                })\r\n                .then(self.$router.push('/')) // 저장 후 홈 화면으로 이동\r\n            });\r\n          });\r\n        })\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style>\r\n  /* 카메라 영상의 너비값을 브라우저 너비에 맞춤 */\r\n  .style_video {\r\n    width: 100%\r\n  }\r\n</style>"]}]}